Aşağıda, “Şifre Yenileme” (Reset Password) sayfası için örnek bir React bileşeni yer alıyor. Bu bileşen, URL üzerinden gelen token bilgisini kullanarak kullanıcıdan yeni şifre girmesini ister; girilen şifrelerin uyuşup uyuşmadığını kontrol eder ve API’ye istek gönderir. İşte detaylı kod örneği:

import React, { useState } from 'react';
import axios from 'axios';
import { useSearchParams, useNavigate } from 'react-router-dom';

const ResetPassword = () => {
  // URL'den token bilgisini alıyoruz (örn: ?token=xxx)
  const [searchParams] = useSearchParams();
  const token = searchParams.get('token');
  const navigate = useNavigate();

  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');

  const handleResetPassword = async (e) => {
    e.preventDefault();
    
    // Şifrelerin uyuşup uyuşmadığını kontrol ediyoruz
    if (newPassword !== confirmPassword) {
      setError('Yeni şifreler uyuşmuyor.');
      return;
    }
    
    try {
      // API'ye şifre sıfırlama isteği gönderiliyor
      const response = await axios.post('/api/auth/reset-password', {
        token,
        newPassword,
      });
      setMessage(response.data.message);
      setError('');
      // Başarılı ise, kullanıcıyı giriş sayfasına yönlendiriyoruz (3 saniye sonra)
      setTimeout(() => {
        navigate('/login');
      }, 3000);
    } catch (err) {
      console.error(err);
      setError(err.response?.data?.message || 'Şifre sıfırlanırken bir hata oluştu.');
      setMessage('');
    }
  };

  return (
    <div className="reset-password-container">
      <h2>Şifreni Sıfırla</h2>
      {error && <div className="error">{error}</div>}
      {message && <div className="message">{message}</div>}
      <form onSubmit={handleResetPassword}>
        <div className="form-group">
          <label htmlFor="newPassword">Yeni Şifre:</label>
          <input
            id="newPassword"
            type="password"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
            minLength={8} // Örneğin minimum 8 karakter
          />
        </div>
        <div className="form-group">
          <label htmlFor="confirmPassword">Yeni Şifre (Tekrar):</label>
          <input
            id="confirmPassword"
            type="password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
            minLength={8}
          />
        </div>
        <button type="submit">Şifreyi Güncelle</button>
      </form>
    </div>
  );
};

export default ResetPassword;

Açıklamalar
	•	Token Yönetimi:
URL üzerinden gelen token bilgisi, useSearchParams kullanılarak alınır. Bu token, API’ye gönderilen isteğin parçası olur.
	•	Form Validasyonu:
Kullanıcının girdiği yeni şifre ile şifre tekrarının uyuşup uyuşmadığı kontrol edilir. Ayrıca, HTML input elementlerinde minLength gibi özelliklerle temel validasyon sağlanır.
	•	API İsteği:
Kullanıcı formu gönderdiğinde, /api/auth/reset-password endpoint’ine POST isteği yapılır. İstek gövdesinde token ve yeni şifre gönderilir. API başarılı yanıt verdiğinde, kullanıcı bilgilendirilir ve giriş sayfasına yönlendirilir.
	•	Hata Yönetimi:
API’den dönen hata mesajları yakalanır ve kullanıcıya uygun bir hata bildirimi yapılır.

Bu sayfa, proje planınızda yer alan “Şifremi Unuttum” senaryosuna uygun şekilde tasarlanmıştır. Backend’de ilgili endpoint’lerin (POST /api/auth/forgot-password ve POST /api/auth/reset-password) doğru şekilde çalıştığından emin olduktan sonra, bu sayfa kullanıcı deneyimi açısından tam entegre bir çözüm sunacaktır.